plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'java'
    id 'idea'
    id 'maven-publish'
}

group = 'cn.apisium'
version = System.getenv('RELEASE_VERSION') ?: "0.0.0-DEV"
def pluginVersion = version

description = "A netty wrapper for Minecraft, which allows running multiple protocols in same port."

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


repositories {
    maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/groups/public/" }
    maven { url "https://repo.maven.apache.org/maven2" }
}

dependencies {
    implementation 'org.shredzone.acme4j:acme4j:2.12'
    implementation 'org.shredzone.acme4j:acme4j-utils:2.12'
    implementation 'org.slf4j:slf4j-api:1.7.31'
    implementation 'io.netty:netty-codec-http:4.1.78.Final'
    implementation 'io.netty:netty-codec-http2:4.1.78.Final'


    // implementation 'org.shredzone.acme4j:acme4j-client:2.12'
    // implementation 'org.bouncycastle:bcpkix-jdk15on:1.69'


    compileOnly 'io.netty:netty-all:4.1.65.Final'
    compileOnly 'org.spigotmc:spigot-api:1.17-R0.1-SNAPSHOT'
    compileOnly('org.spigotmc:plugin-annotations:1.2.3-SNAPSHOT') {
        exclude group: 'org.bukkit'
    }

    annotationProcessor 'org.spigotmc:plugin-annotations:1.2.3-SNAPSHOT'
}

shadowJar {
    dependencies {
        include(dependency('org.shredzone.acme4j:acme4j:2.12'))
        include(dependency('org.shredzone.acme4j:acme4j-utils:2.12'))
        include(dependency('org.shredzone.acme4j:acme4j-client:2.12'))
        include(dependency('org.bouncycastle:bcpkix-jdk15on:1.69'))
        include(dependency('org.bouncycastle:bcprov-jdk15on:1.69'))
        include(dependency('org.bouncycastle:bcutil-jdk15on:1.69'))
        include(dependency('org.bitbucket.b_c:jose4j:0.7.8'))
        include(dependency('org.slf4j:slf4j-api:1.7.31'))
        include(dependency('io.netty:netty-codec-http:4.1.78.Final'))
        include(dependency('io.netty:netty-codec-http2:4.1.78.Final'))



        relocate('org.slf4j', 'cn.apisium.uniporter.libs.org.slf4j')
        relocate('org.shredzone', 'cn.apisium.uniporter.libs.org.shredzone')
        relocate('org.jose4j', 'cn.apisium.uniporter.libs.org.jose4j')
        relocate('org.bouncycastle', 'cn.apisium.uniporter.libs.org.bouncycastle')
    }
    exclude('META-INF/versions/**')
    archiveClassifier.set('')
    minimize()
    filesMatching('plugin.yml') {
        filter {
            it.replaceAll('@@RELEASE_VERSION@@', pluginVersion)
        }
    }
}
jar {
    enabled = false
    dependsOn(shadowJar)
}
artifacts {
    shadowJar
}
build.dependsOn(shadowJar)
publishing {
    publications {
        shadow(MavenPublication) {
            publication -> project.shadow.component(publication)
        }
    }
}